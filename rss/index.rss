<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>sureshbabu's blog</title><description>ctrl + C  ctrl + V</description><link>https://suresh2.com/</link><image><url>https://suresh2.com/favicon.png</url><title>sureshbabu's blog</title><link>https://suresh2.com/</link></image><generator>Ghost 1.8</generator><lastBuildDate>Sat, 21 Oct 2017 22:35:44 GMT</lastBuildDate><atom:link href="https://suresh2.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>How to run openfaas in azure using docker machine and Azure CLI?</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;&lt;a href="https://github.com/openfaas/faas"&gt;openfaas&lt;/a&gt; is a Serverless Framework for Docker and Kubernetes. This guide is Azure version of the &lt;a href="https://github.com/openfaas/faas/blob/master/guide/deployment_digitalocean.md"&gt;openfaas digital ocean guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this guide we will be using the &lt;code&gt;docker-machine&lt;/code&gt; tool to provision a number of Docker Swarm nodes in azure then we'll connect them together and deploy OpenFaaS. Before you&lt;/p&gt;&lt;/div&gt;</description><link>https://suresh2.com/how-to-run-openfaas-in-azure/</link><guid isPermaLink="false">59eb358e98d26d00018dbfc8</guid><dc:creator>suresh babu</dc:creator><pubDate>Sat, 21 Oct 2017 16:33:25 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;&lt;a href="https://github.com/openfaas/faas"&gt;openfaas&lt;/a&gt; is a Serverless Framework for Docker and Kubernetes. This guide is Azure version of the &lt;a href="https://github.com/openfaas/faas/blob/master/guide/deployment_digitalocean.md"&gt;openfaas digital ocean guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this guide we will be using the &lt;code&gt;docker-machine&lt;/code&gt; tool to provision a number of Docker Swarm nodes in azure then we'll connect them together and deploy OpenFaaS. Before you get started - sign up to &lt;a href="https://azure.microsoft.com/en-gb/free/"&gt;Azure here to get free credits&lt;/a&gt;. Once you've signed up come back to the tutorial.&lt;/p&gt;
&lt;h2 id="installazurecliandgettheazuresubscriptionid"&gt;Install Azure CLI and get the azure subscription ID&lt;/h2&gt;
&lt;p&gt;First, Install &lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest"&gt;Azure CLI&lt;/a&gt; and obtain your Azure subscription ID with &lt;a href="https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_show"&gt;az account show&lt;/a&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-azurecli"&gt;az login
sub=$(az account show --query &amp;quot;id&amp;quot; -o tsv)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="installdockermachine"&gt;Install Docker Machine&lt;/h2&gt;
&lt;p&gt;Type in &lt;code&gt;docker-machine&lt;/code&gt; to see if you already have the tool installed this is normally bundled with Docker for Mac/Windows. If not then you can download &lt;a href="https://docs.docker.com/machine/install-machine/"&gt;Docker Machine here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="createdockernodes"&gt;Create Docker Nodes&lt;/h2&gt;
&lt;p&gt;Use Docker Machine to create Docker hosts or nodes. On Azure your hosts or VMs (Virtual Machines)  will run a full version of Linux. Note: you'll be able to connect to any of your VMs with &lt;code&gt;ssh&lt;/code&gt; later on.&lt;/p&gt;
&lt;p&gt;The example below creates 3 vms in the north europe zone, if you want to deploy only one vm don't run the step 2.&lt;/p&gt;
&lt;p&gt;This process will take a few minutes as VMS are created and Docker installed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-machine create \
        --driver azure \
        --azure-ssh-user azureuser \
        --azure-location=northeurope \
        --azure-subscription-id $sub \
        --azure-resource-group openfaas \
        --azure-open-port 8080 \
        --azure-open-port 9090 \
        --azure-open-port 2377 \
        --azure-open-port 7946/* \
        --azure-open-port 4789/udp \
        node-1;
        
for i in {2..3}; do
    docker-machine create \
        --driver azure \
        --azure-ssh-user azureuser \
        --azure-location=northeurope \
        --azure-subscription-id $sub \
        --azure-resource-group openfaas \
        --azure-open-port 2377 \
        --azure-open-port 7946/* \
        --azure-open-port 4789/udp \
        node-$i;
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List the newly created Docker nodes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-machine ls

NAME     ACTIVE   DRIVER   STATE     URL                        SWARM   DOCKER        ERRORS
node-1   -        azure    Running   tcp://40.113.93.183:2376           v17.10.0-ce   
node-2   -        azure    Running   tcp://13.74.156.226:2376           v17.10.0-ce   
node-3   -        azure    Running   tcp://13.74.254.30:2376            v17.10.0-ce   

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refer to the &lt;a href="https://docs.docker.com/machine/drivers/azure/#options"&gt;documentation&lt;/a&gt; for more detailed information on the azure options for docker-machine.&lt;/p&gt;
&lt;h1 id="createyourdockerswarm"&gt;Create your Docker Swarm&lt;/h1&gt;
&lt;p&gt;A Docker Swarm can contain as little as a single master node and begins by running the &lt;code&gt;docker swarm init&lt;/code&gt; command. It's important if you have more than one node that you specify an &lt;code&gt;--advertise-addr&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Intialize Docker Swarm on &lt;code&gt;node-1&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-machine ssh node-1 -- sudo docker swarm init --advertise-addr $(docker-machine ip node-1)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;If you opted to deploy a single node, then skip to the next section.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When deploying more than a single Docker host take a note of the command to add a worker to the Swarm. This output contains your &lt;em&gt;join token&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you lose it you can get a new one any time with the command: &lt;code&gt;docker swarm join-token worker&lt;/code&gt; or &lt;code&gt;manager&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Swarm initialized: current node (vtq9rjklmjs9gzrhyfykcpzsx) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-5lnsbx94doxdrd5t1yaj6hfodc3hj72x43tpfiweb0g2ythat2-6i2kom6a9m2ckr44fiu2dtt9a 40.113.93.183:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add &lt;code&gt;node-2&lt;/code&gt; to the Swarm, using the &lt;code&gt;docker swarm join..&lt;/code&gt; command returned when initializing the master.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-machine ssh node-2 -- sudo docker swarm join --token SWMTKN-1-5lnsbx94doxdrd5t1yaj6hfodc3hj72x43tpfiweb0g2ythat2-6i2kom6a9m2ckr44fiu2dtt9a 40.113.93.183:2377;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Repeat for &lt;code&gt;node-3&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-machine ssh node-3 -- sudo docker swarm join --token SWMTKN-1-5lnsbx94doxdrd5t1yaj6hfodc3hj72x43tpfiweb0g2ythat2-6i2kom6a9m2ckr44fiu2dtt9a 40.113.93.183:2377;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="configuredockerclitouseremoteswarm"&gt;Configure Docker CLI to use remote Swarm&lt;/h2&gt;
&lt;p&gt;Run this command each time you open a new shell, this tells Docker where your remote Swarm is.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval $(docker-machine env node-1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="deploytheopenfaasstack"&gt;Deploy the OpenFaaS Stack&lt;/h2&gt;
&lt;p&gt;This command clones the OpenFaaS Github repository then checkouts out a stable release before deploying a Docker stack. Docker Swarm will automatically distribute your functions and OpenFaaS services across the cluster.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/alexellis/faas &amp;amp;&amp;amp; \
  cd faas &amp;amp;&amp;amp; \
  git checkout 0.6.5 &amp;amp;&amp;amp; \
  ./deploy_stack.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="testtheui"&gt;Test the UI&lt;/h2&gt;
&lt;p&gt;Within a few seconds (or minutes if on a poor WiFi connection) the API gateway and sample functions will be deployed to the Swarm cluster running on Azure.&lt;/p&gt;
&lt;p&gt;Access the Gateway UI via the IP address returned by &lt;code&gt;docker-machine ip node-1&lt;/code&gt; (you can also access via &lt;code&gt;node-2&lt;/code&gt; and &lt;code&gt;node-3&lt;/code&gt;):.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo http://$(docker-machine ip node-1):8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prometheus metrics can be viewed on port 9090 on a master. Fetch the IP like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo http://$(docker-machine ip node-1):9090
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="deletingazurevms"&gt;Deleting AZURE VMs&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;docker-machine&lt;/code&gt; to delete any created vms if are finished with your OpenFaaS deployment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker stack rm func
docker-machine rm node-1 node-2 node-3
az group delete -n openfaas
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content:encoded></item><item><title>welcome to my blog</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;welcome to my blog&lt;/p&gt;
&lt;/div&gt;</description><link>https://suresh2.com/welcome-to-my-blog/</link><guid isPermaLink="false">59cab18da9316f0001111bd9</guid><dc:creator>suresh babu</dc:creator><pubDate>Tue, 26 Sep 2017 19:59:21 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;welcome to my blog&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>